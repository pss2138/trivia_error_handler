{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pss21\\\\OneDrive\\\\Desktop\\\\fullstack\\\\2. API\\\\trivia\\\\frontend\\\\src\\\\components\\\\QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: '/quizzes',\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.includes(formatGuess);\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: \"/categories\",\n      //TODO: update request URL\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"choose-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Choose Category\"), React.createElement(\"div\", {\n      className: \"category-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"ALL\"), Object.keys(this.state.categories).map(id => {\n      return React.createElement(\"div\", {\n        key: id,\n        value: id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: this.state.categories[id],\n          id\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.state.categories[id]);\n    })));\n  }\n\n  renderFinalScore() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"final-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \" Your Final Score is \", this.state.numCorrect), React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \" Play Again? \"));\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"div\", {\n      className: \"\".concat(evaluate ? 'correct' : 'wrong'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, evaluate ? \"You were correct!\" : \"You were incorrect\"), React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, this.state.currentQuestion.answer), React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \" Next Question \"));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["C:\\Users\\pss21\\OneDrive\\Desktop\\fullstack\\2. API\\trivia\\frontend\\src\\components\\QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","constructor","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","ajax","url","dataType","contentType","data","JSON","stringify","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","success","result","showAnswer","question","guess","forceEnd","error","alert","submitGuess","preventDefault","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","answerArray","answer","split","includes","categories","componentDidMount","renderPrePlay","Object","keys","map","renderFinalScore","renderCorrectAnswer","renderPlay","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport '../stylesheets/QuizView.css';\r\n\r\nconst questionsPerPlay = 5;\r\n\r\nclass QuizView extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            quizCategory: null,\r\n            previousQuestions: [],\r\n            showAnswer: false,\r\n            categories: {},\r\n            numCorrect: 0,\r\n            currentQuestion: {},\r\n            guess: '',\r\n            forceEnd: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        $.ajax({\r\n            url: `/categories`, //TODO: update request URL\r\n            type: \"GET\",\r\n            success: (result) => {\r\n                this.setState({ categories: result.categories })\r\n                return;\r\n            },\r\n            error: (error) => {\r\n                alert('Unable to load categories. Please try your request again')\r\n                return;\r\n            }\r\n        })\r\n    }\r\n\r\n    selectCategory = ({ type, id = 0 }) => {\r\n        this.setState({ quizCategory: { type, id } }, this.getNextQuestion)\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n    getNextQuestion = () => {\r\n        const previousQuestions = [...this.state.previousQuestions]\r\n        if (this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\r\n\r\n        $.ajax({\r\n            url: '/quizzes', //TODO: update request URL\r\n            type: \"POST\",\r\n            dataType: 'json',\r\n            contentType: 'application/json',\r\n            data: JSON.stringify({\r\n                previous_questions: previousQuestions,\r\n                quiz_category: this.state.quizCategory\r\n            }),\r\n            xhrFields: {\r\n                withCredentials: true\r\n            },\r\n            crossDomain: true,\r\n            success: (result) => {\r\n                this.setState({\r\n                    showAnswer: false,\r\n                    previousQuestions: previousQuestions,\r\n                    currentQuestion: result.question,\r\n                    guess: '',\r\n                    forceEnd: result.question ? false : true\r\n                })\r\n                return;\r\n            },\r\n            error: (error) => {\r\n                alert('Unable to load question. Please try your request again')\r\n                return;\r\n            }\r\n        })\r\n    }\r\n\r\n    submitGuess = (event) => {\r\n        event.preventDefault();\r\n        const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\r\n        let evaluate = this.evaluateAnswer()\r\n        this.setState({\r\n            numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\r\n            showAnswer: true,\r\n        })\r\n    }\r\n\r\n    restartGame = () => {\r\n        this.setState({\r\n            quizCategory: null,\r\n            previousQuestions: [],\r\n            showAnswer: false,\r\n            numCorrect: 0,\r\n            currentQuestion: {},\r\n            guess: '',\r\n            forceEnd: false\r\n        })\r\n    }\r\n\r\n    renderPrePlay() {\r\n        return (\r\n            <div className=\"quiz-play-holder\">\r\n                <div className=\"choose-header\">Choose Category</div>\r\n                <div className=\"category-holder\">\r\n                    <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\r\n                    {Object.keys(this.state.categories).map(id => {\r\n                        return (\r\n                            <div\r\n                                key={id}\r\n                                value={id}\r\n                                className=\"play-category\"\r\n                                onClick={() => this.selectCategory({ type: this.state.categories[id], id })}>\r\n                                {this.state.categories[id]}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderFinalScore() {\r\n        return (\r\n            <div className=\"quiz-play-holder\">\r\n                <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\r\n                <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    evaluateAnswer = () => {\r\n        const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\r\n        const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\r\n        return answerArray.includes(formatGuess)\r\n    }\r\n\r\n    renderCorrectAnswer() {\r\n        const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\r\n        let evaluate = this.evaluateAnswer()\r\n        return (\r\n            <div className=\"quiz-play-holder\">\r\n                <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n                <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\r\n                <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\r\n                <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderPlay() {\r\n        return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\r\n            ? this.renderFinalScore()\r\n            : this.state.showAnswer\r\n                ? this.renderCorrectAnswer()\r\n                : (\r\n                    <div className=\"quiz-play-holder\">\r\n                        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n                        <form onSubmit={this.submitGuess}>\r\n                            <input type=\"text\" name=\"guess\" onChange={this.handleChange} />\r\n                            <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\r\n                        </form>\r\n                    </div>\r\n                )\r\n    }\r\n\r\n\r\n    render() {\r\n        return this.state.quizCategory\r\n            ? this.renderPlay()\r\n            : this.renderPrePlay()\r\n    }\r\n}\r\n\r\nexport default QuizView;"]},"metadata":{},"sourceType":"module"}